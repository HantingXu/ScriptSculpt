#include "ConstLetter.h"
#include <iostream>

Letter::Letter()
{
	transform.pos = vec2(0);
	transform.ori = vec2(0);
	transform.scale = vec2(1);
}

void Letter::generateControlPoints(char letter) {
	std::vector<vec2> points;
	switch (letter) {
	case 'A':
		points = {
			vec2(6.0, 115.5), vec2(-68.0, 115.5), vec2(-111.0, 62.5), vec2(-111.0, -0.5),
			vec2(-111.0, -0.5), vec2(-111.0, -65.5), vec2(-68.0, -115.5), vec2(6.0, -115.5),
			vec2(6.0, -115.5), vec2(80.0, -115.5), vec2(123.0, -65.5), vec2(123.0, -0.5),
			vec2(123.0, -0.5), vec2(123.0, 62.5), vec2(80.0, 115.5), vec2(6.0, 115.5),
			vec2(299.0, 256.5), vec2(299.0, 85.5), vec2(299.0, -85.5), vec2(299.0, -256.5),
			vec2(299.0, -256.5), vec2(238.33333333333337, -256.5), vec2(177.66666666666669, -256.5), vec2(117.0, -256.5),
			vec2(117.0, -256.5), vec2(117.0, -237.5), vec2(117.0, -218.5), vec2(117.0, -199.5),
			vec2(117.0, -199.5), vec2(116.33333333333331, -199.5), vec2(115.66666666666669, -199.5), vec2(115.0, -199.5),
			vec2(115.0, -199.5), vec2(83.0, -250.5), vec2(20.0, -273.5), vec2(-40.0, -273.5),
			vec2(-40.0, -273.5), vec2(-192.0, -273.5), vec2(-299.0, -146.5), vec2(-299.0, 0.5),
			vec2(-299.0, 0.5), vec2(-299.0, 147.5), vec2(-194.0, 273.5), vec2(-42.0, 273.5),
			vec2(-42.0, 273.5), vec2(17.0, 273.5), vec2(79.0, 251.5), vec2(117.0, 206.5),
			vec2(117.0, 206.5), vec2(117.0, 223.16666666666669), vec2(117.0, 239.83333333333331), vec2(117.0, 256.5),
			vec2(117.0, 256.5), vec2(177.66666666666669, 256.5), vec2(238.33333333333337, 256.5), vec2(299.0, 256.5)
		};
		break;
	case 'B':
		points = {
			vec2(-92.0, -463.0), vec2(-92.0, -186.33333333333337), vec2(-92.0, 90.33333333333326), vec2(-92.0, 367.0),
			vec2(-92.0, 367.0), vec2(-31.333333333333343, 367.0), vec2(29.333333333333314, 367.0), vec2(90.0, 367.0),
			vec2(90.0, 367.0), vec2(90.0, 244.66666666666663), vec2(90.0, 122.33333333333337), vec2(90.0, 0.0),
			vec2(90.0, 0.0), vec2(129.0, 45.0), vec2(190.0, 67.0), vec2(249.0, 67.0),
			vec2(249.0, 67.0), vec2(401.0, 67.0), vec2(506.0, -59.0), vec2(506.0, -206.0),
			vec2(506.0, -206.0), vec2(506.0, -354.0), vec2(400.0, -480.0), vec2(247.0, -480.0),
			vec2(247.0, -480.0), vec2(187.0, -480.0), vec2(125.0, -457.0), vec2(92.0, -406.0),
			vec2(92.0, -406.0), vec2(91.33333333333334, -406.0), vec2(90.66666666666666, -406.0), vec2(90.0, -406.0),
			vec2(90.0, -406.0), vec2(90.0, -425.0), vec2(90.0, -444.0), vec2(90.0, -463.0),
			vec2(90.0, -463.0), vec2(29.333333333333343, -463.0), vec2(-31.33333333333333, -463.0), vec2(-92.0, -463.0),
			vec2(201.0, -91.0), vec2(127.0, -91.0), vec2(84.0, -144.0), vec2(84.0, -207.0),
			vec2(84.0, -207.0), vec2(84.0, -272.0), vec2(127.0, -322.0), vec2(201.0, -322.0),
			vec2(201.0, -322.0), vec2(275.0, -322.0), vec2(318.0, -272.0), vec2(318.0, -207.0),
			vec2(318.0, -207.0), vec2(318.0, -144.0), vec2(275.0, -91.0), vec2(201.0, -91.0)
		};
		break;
	case 'C':
		points = {
			vec2(226.5, 226.5), vec2(226.5, 175.16666666666669), vec2(226.5, 123.83333333333337), vec2(226.5, 72.5),
			vec2(226.5, 72.5), vec2(199.5, 92.5), vec2(167.5, 108.5), vec2(132.5, 108.5),
			vec2(132.5, 108.5), vec2(62.5, 108.5), vec2(7.5, 54.5), vec2(7.5, -16.5),
			vec2(7.5, -16.5), vec2(7.5, -90.5), vec2(60.5, -142.5), vec2(135.5, -142.5),
			vec2(135.5, -142.5), vec2(167.5, -142.5), vec2(202.5, -129.5), vec2(226.5, -107.5),
			vec2(226.5, -107.5), vec2(226.5, -158.83333333333331), vec2(226.5, -210.16666666666666), vec2(226.5, -261.5),
			vec2(226.5, -261.5), vec2(186.5, -281.5), vec2(142.5, -290.5), vec2(98.5, -290.5),
			vec2(98.5, -290.5), vec2(-53.5, -290.5), vec2(-180.5, -177.5), vec2(-180.5, -22.5),
			vec2(-180.5, -22.5), vec2(-180.5, 142.5), vec2(-54.5, 256.5), vec2(106.5, 256.5),
			vec2(106.5, 256.5), vec2(148.5, 256.5), vec2(190.5, 246.5), vec2(226.5, 226.5)
		};
		break;
	case 'D':
		points = {
			vec2(-94.0, -463.0), vec2(-94.0, -444.0), vec2(-94.0, -425.0), vec2(-94.0, -406.0),
			vec2(-94.0, -406.0), vec2(-94.66666666666669, -406.0), vec2(-95.33333333333331, -406.0), vec2(-96.0, -406.0),
			vec2(-96.0, -406.0), vec2(-128.0, -457.0), vec2(-191.0, -480.0), vec2(-251.0, -480.0),
			vec2(-251.0, -480.0), vec2(-403.0, -480.0), vec2(-510.0, -353.0), vec2(-510.0, -206.0),
			vec2(-510.0, -206.0), vec2(-510.0, -59.0), vec2(-405.0, 67.0), vec2(-253.0, 67.0),
			vec2(-253.0, 67.0), vec2(-194.0, 67.0), vec2(-132.0, 45.0), vec2(-94.0, 0.0),
			vec2(-94.0, 0.0), vec2(-94.0, 122.33333333333337), vec2(-94.0, 244.66666666666663), vec2(-94.0, 367.0),
			vec2(-94.0, 367.0), vec2(-33.333333333333314, 367.0), vec2(27.33333333333337, 367.0), vec2(88.0, 367.0),
			vec2(88.0, 367.0), vec2(88.0, 90.33333333333337), vec2(88.0, -186.33333333333326), vec2(88.0, -463.0),
			vec2(88.0, -463.0), vec2(27.33333333333337, -463.0), vec2(-33.333333333333314, -463.0), vec2(-94.0, -463.0),
			vec2(-205.0, -91.0), vec2(-279.0, -91.0), vec2(-322.0, -144.0), vec2(-322.0, -207.0),
			vec2(-322.0, -207.0), vec2(-322.0, -272.0), vec2(-279.0, -322.0), vec2(-205.0, -322.0),
			vec2(-205.0, -322.0), vec2(-131.0, -322.0), vec2(-88.0, -272.0), vec2(-88.0, -207.0),
			vec2(-88.0, -207.0), vec2(-88.0, -144.0), vec2(-131.0, -91.0), vec2(-205.0, -91.0)
		};
		break;
	case 'E':
		points = {
			vec2(82.0, 75.0), vec2(152.33333333333331, 75.0), vec2(222.66666666666663, 75.0), vec2(293.0, 75.0),
			vec2(293.0, 75.0), vec2(284.0, 124.0), vec2(239.0, 156.0), vec2(190.0, 156.0),
			vec2(190.0, 156.0), vec2(137.0, 156.0), vec2(93.0, 128.0), vec2(82.0, 75.0),
			vec2(462.0, -11.0), vec2(462.0, -17.333333333333343), vec2(462.0, -23.666666666666657), vec2(462.0, -30.0),
			vec2(462.0, -30.0), vec2(334.33333333333337, -30.0), vec2(206.66666666666669, -30.0), vec2(79.0, -30.0),
			vec2(79.0, -30.0), vec2(79.0, -104.0), vec2(118.0, -144.0), vec2(193.0, -144.0),
			vec2(193.0, -144.0), vec2(232.0, -144.0), vec2(260.0, -131.0), vec2(280.0, -97.0),
			vec2(280.0, -97.0), vec2(338.3333333333333, -97.0), vec2(396.66666666666663, -97.0), vec2(455.0, -97.0),
			vec2(455.0, -97.0), vec2(426.0, -218.0), vec2(311.0, -273.0), vec2(194.0, -273.0),
			vec2(194.0, -273.0), vec2(24.0, -273.0), vec2(-103.0, -177.0), vec2(-103.0, 0.0),
			vec2(-103.0, 0.0), vec2(-103.0, 171.0), vec2(14.0, 274.0), vec2(181.0, 274.0),
			vec2(181.0, 274.0), vec2(359.0, 274.0), vec2(462.0, 164.0), vec2(462.0, -11.0)
		};
		break;
	case 'F':
		points = {
			vec2(90.0, -87.0), vec2(90.0, -208.0), vec2(90.0, -329.0), vec2(90.0, -450.0),
			vec2(90.0, -450.0), vec2(29.333333333333343, -450.0), vec2(-31.333333333333314, -450.0), vec2(-92.0, -450.0),
			vec2(-92.0, -450.0), vec2(-92.0, -329.0), vec2(-92.0, -208.0), vec2(-92.0, -87.0),
			vec2(-92.0, -87.0), vec2(-113.33333333333333, -87.0), vec2(-134.66666666666666, -87.0), vec2(-156.0, -87.0),
			vec2(-156.0, -87.0), vec2(-156.0, -37.0), vec2(-156.0, 13.0), vec2(-156.0, 63.0),
			vec2(-156.0, 63.0), vec2(-134.66666666666669, 63.0), vec2(-113.33333333333334, 63.0), vec2(-92.0, 63.0),
			vec2(-92.0, 63.0), vec2(-92.0, 84.66666666666663), vec2(-92.0, 106.33333333333337), vec2(-92.0, 128.0),
			vec2(-92.0, 128.0), vec2(-92.0, 199.0), vec2(-90.0, 251.0), vec2(-40.0, 308.0),
			vec2(-40.0, 308.0), vec2(5.0, 361.0), vec2(70.0, 390.0), vec2(139.0, 390.0),
			vec2(139.0, 390.0), vec2(167.0, 390.0), vec2(192.0, 385.0), vec2(217.0, 372.0),
			vec2(217.0, 372.0), vec2(217.0, 319.66666666666663), vec2(217.0, 267.33333333333337), vec2(217.0, 215.0),
			vec2(217.0, 215.0), vec2(196.0, 224.0), vec2(177.0, 232.0), vec2(153.0, 232.0),
			vec2(153.0, 232.0), vec2(106.0, 232.0), vec2(90.0, 204.0), vec2(90.0, 146.0),
			vec2(90.0, 146.0), vec2(90.0, 118.33333333333337), vec2(90.0, 90.66666666666663), vec2(90.0, 63.0),
			vec2(90.0, 63.0), vec2(132.33333333333331, 63.0), vec2(174.66666666666663, 63.0), vec2(217.0, 63.0),
			vec2(217.0, 63.0), vec2(217.0, 13.0), vec2(217.0, -37.0), vec2(217.0, -87.0),
			vec2(217.0, -87.0), vec2(174.66666666666669, -87.0), vec2(132.33333333333337, -87.0), vec2(90.0, -87.0)
		};
		break;
	case 'G':
		points = {
			vec2(110.0, 409.0), vec2(110.0, 254.66666666666669), vec2(110.0, 100.33333333333337), vec2(110.0, -54.0),
			vec2(110.0, -54.0), vec2(110.0, -272.0), vec2(2.0, -360.0), vec2(-187.0, -360.0),
			vec2(-187.0, -360.0), vec2(-305.0, -360.0), vec2(-463.0, -299.0), vec2(-479.0, -164.0),
			vec2(-479.0, -164.0), vec2(-411.0, -164.0), vec2(-343.0, -164.0), vec2(-275.0, -164.0),
			vec2(-275.0, -164.0), vec2(-270.0, -182.0), vec2(-257.0, -195.0), vec2(-241.0, -203.0),
			vec2(-241.0, -203.0), vec2(-225.0, -211.0), vec2(-206.0, -215.0), vec2(-189.0, -215.0),
			vec2(-189.0, -215.0), vec2(-91.0, -215.0), vec2(-72.0, -151.0), vec2(-72.0, -68.0),
			vec2(-72.0, -68.0), vec2(-72.0, -60.0), vec2(-72.0, -52.0), vec2(-72.0, -44.0),
			vec2(-72.0, -44.0), vec2(-119.0, -91.0), vec2(-167.0, -114.0), vec2(-235.0, -114.0),
			vec2(-235.0, -114.0), vec2(-385.0, -114.0), vec2(-488.0, 0.0), vec2(-488.0, 148.0),
			vec2(-488.0, 148.0), vec2(-488.0, 298.0), vec2(-382.0, 426.0), vec2(-225.0, 426.0),
			vec2(-225.0, 426.0), vec2(-165.0, 426.0), vec2(-110.0, 406.0), vec2(-74.0, 355.0),
			vec2(-74.0, 355.0), vec2(-73.33333333333331, 355.0), vec2(-72.66666666666669, 355.0), vec2(-72.0, 355.0),
			vec2(-72.0, 355.0), vec2(-72.0, 373.0), vec2(-72.0, 391.0), vec2(-72.0, 409.0),
			vec2(-72.0, 409.0), vec2(-11.333333333333314, 409.0), vec2(49.33333333333337, 409.0), vec2(110.0, 409.0),
			vec2(-183.0, 272.0), vec2(-257.0, 272.0), vec2(-300.0, 219.0), vec2(-300.0, 156.0),
			vec2(-300.0, 156.0), vec2(-300.0, 91.0), vec2(-257.0, 41.0), vec2(-183.0, 41.0),
			vec2(-183.0, 41.0), vec2(-109.0, 41.0), vec2(-66.0, 91.0), vec2(-66.0, 156.0),
			vec2(-66.0, 156.0), vec2(-66.0, 219.0), vec2(-109.0, 272.0), vec2(-183.0, 272.0)
		};
		break;
	case 'H':
		points = {
			vec2(-95.0, 445.0), vec2(-34.33333333333334, 445.0), vec2(26.333333333333314, 445.0), vec2(87.0, 445.0),
			vec2(87.0, 445.0), vec2(87.0, 317.66666666666663), vec2(87.0, 190.33333333333337), vec2(87.0, 63.0),
			vec2(87.0, 63.0), vec2(87.66666666666666, 63.0), vec2(88.33333333333334, 63.0), vec2(89.0, 63.0),
			vec2(89.0, 63.0), vec2(131.0, 119.0), vec2(182.0, 145.0), vec2(253.0, 145.0),
			vec2(253.0, 145.0), vec2(383.0, 145.0), vec2(446.0, 59.0), vec2(446.0, -71.0),
			vec2(446.0, -71.0), vec2(446.0, -175.66666666666666), vec2(446.0, -280.3333333333333), vec2(446.0, -385.0),
			vec2(446.0, -385.0), vec2(385.33333333333337, -385.0), vec2(324.6666666666667, -385.0), vec2(264.0, -385.0),
			vec2(264.0, -385.0), vec2(264.0, -297.33333333333337), vec2(264.0, -209.66666666666669), vec2(264.0, -122.0),
			vec2(264.0, -122.0), vec2(264.0, -62.0), vec2(255.0, 0.0), vec2(182.0, 0.0),
			vec2(182.0, 0.0), vec2(110.0, 0.0), vec2(87.0, -62.0), vec2(87.0, -122.0),
			vec2(87.0, -122.0), vec2(87.0, -209.66666666666666), vec2(87.0, -297.3333333333333), vec2(87.0, -385.0),
			vec2(87.0, -385.0), vec2(26.333333333333343, -385.0), vec2(-34.33333333333333, -385.0), vec2(-95.0, -385.0),
			vec2(-95.0, -385.0), vec2(-95.0, -108.33333333333337), vec2(-95.0, 168.33333333333326), vec2(-95.0, 445.0)
		};
		break;
	case 'I':
		points = {
			vec2(91.0, 107.0), vec2(91.0, -64.0), vec2(91.0, -235.0), vec2(91.0, -406.0),
			vec2(91.0, -406.0), vec2(30.333333333333343, -406.0), vec2(-30.33333333333333, -406.0), vec2(-91.0, -406.0),
			vec2(-91.0, -406.0), vec2(-91.0, -235.0), vec2(-91.0, -64.0), vec2(-91.0, 107.0),
			vec2(-91.0, 107.0), vec2(-30.333333333333343, 107.0), vec2(30.333333333333314, 107.0), vec2(91.0, 107.0),
			vec2(0.0, 406.0), vec2(56.0, 406.0), vec2(102.0, 360.0), vec2(102.0, 304.0),
			vec2(102.0, 304.0), vec2(102.0, 248.0), vec2(56.0, 202.0), vec2(0.0, 202.0),
			vec2(0.0, 202.0), vec2(-56.0, 202.0), vec2(-102.0, 248.0), vec2(-102.0, 304.0),
			vec2(-102.0, 304.0), vec2(-102.0, 360.0), vec2(-56.0, 406.0), vec2(0.0, 406.0)
		};
		break;
		//J looks pretty much the same as I in the chosen font
	case 'J':
		points = {
			vec2(91.0, 235.0), vec2(91.0, -21.333333333333314), vec2(91.0, -277.66666666666663), vec2(91.0, -534.0),
			vec2(91.0, -534.0), vec2(30.333333333333343, -534.0), vec2(-30.33333333333333, -534.0), vec2(-91.0, -534.0),
			vec2(-91.0, -534.0), vec2(-91.0, -277.6666666666667), vec2(-91.0, -21.33333333333337), vec2(-91.0, 235.0),
			vec2(-91.0, 235.0), vec2(-30.333333333333343, 235.0), vec2(30.333333333333314, 235.0), vec2(91.0, 235.0),
			vec2(0.0, 534.0), vec2(56.0, 534.0), vec2(102.0, 488.0), vec2(102.0, 432.0),
			vec2(102.0, 432.0), vec2(102.0, 376.0), vec2(56.0, 330.0), vec2(0.0, 330.0),
			vec2(0.0, 330.0), vec2(-56.0, 330.0), vec2(-102.0, 376.0), vec2(-102.0, 432.0),
			vec2(-102.0, 432.0), vec2(-102.0, 488.0), vec2(-56.0, 534.0), vec2(0.0, 534.0) 
		};
		break;
	case 'K':
		points = {
			vec2(92.0, 554.0), vec2(92.0, 386.66666666666674), vec2(92.0, 219.33333333333337), vec2(92.0, 52.0),
			vec2(92.0, 52.0), vec2(155.0, 113.66666666666669), vec2(218.0, 175.33333333333331), vec2(281.0, 237.0),
			vec2(281.0, 237.0), vec2(364.0, 237.0), vec2(447.0, 237.0), vec2(530.0, 237.0),
			vec2(530.0, 237.0), vec2(444.33333333333337, 158.0), vec2(358.6666666666667, 79.0), vec2(273.0, 0.0),
			vec2(273.0, 0.0), vec2(364.0, -92.0), vec2(455.0, -184.0), vec2(546.0, -276.0),
			vec2(546.0, -276.0), vec2(461.0, -276.0), vec2(376.0, -276.0), vec2(291.0, -276.0),
			vec2(291.0, -276.0), vec2(224.66666666666669, -206.33333333333334), vec2(158.33333333333337, -136.66666666666669), vec2(92.0, -67.0),
			vec2(92.0, -67.0), vec2(92.0, -136.66666666666666), vec2(92.0, -206.33333333333331), vec2(92.0, -276.0),
			vec2(92.0, -276.0), vec2(31.333333333333343, -276.0), vec2(-29.33333333333333, -276.0), vec2(-90.0, -276.0),
			vec2(-90.0, -276.0), vec2(-90.0, 0.6666666666666288), vec2(-90.0, 277.33333333333326), vec2(-90.0, 554.0),
			vec2(-90.0, 554.0), vec2(-29.333333333333343, 554.0), vec2(31.333333333333314, 554.0), vec2(92.0, 554.0)
		};
		break;
	case 'L':
		points = {
			vec2(91.0, 415.0), vec2(91.0, 138.33333333333337), vec2(91.0, -138.33333333333326), vec2(91.0, -415.0),
			vec2(91.0, -415.0), vec2(30.333333333333343, -415.0), vec2(-30.33333333333333, -415.0), vec2(-91.0, -415.0),
			vec2(-91.0, -415.0), vec2(-91.0, -138.33333333333337), vec2(-91.0, 138.33333333333326), vec2(-91.0, 415.0),
			vec2(-91.0, 415.0), vec2(-30.333333333333343, 415.0), vec2(30.333333333333314, 415.0), vec2(91.0, 415.0)
		};
		break;
	case 'M':
		points = {
			vec2(-253.0, 248.0), vec2(-253.0, 226.66666666666669), vec2(-253.0, 205.33333333333331), vec2(-253.0, 184.0),
			vec2(-253.0, 184.0), vec2(-252.33333333333334, 184.0), vec2(-251.66666666666666, 184.0), vec2(-251.0, 184.0),
			vec2(-251.0, 184.0), vec2(-208.0, 241.0), vec2(-155.0, 265.0), vec2(-89.0, 265.0),
			vec2(-89.0, 265.0), vec2(-15.0, 265.0), vec2(49.0, 235.0), vec2(86.0, 167.0),
			vec2(86.0, 167.0), vec2(121.0, 231.0), vec2(190.0, 265.0), vec2(260.0, 265.0),
			vec2(260.0, 265.0), vec2(390.0, 265.0), vec2(435.0, 180.0), vec2(435.0, 62.0),
			vec2(435.0, 62.0), vec2(435.0, -47.0), vec2(435.0, -156.0), vec2(435.0, -265.0),
			vec2(435.0, -265.0), vec2(374.33333333333337, -265.0), vec2(313.66666666666663, -265.0), vec2(253.0, -265.0),
			vec2(253.0, -265.0), vec2(253.0, -183.33333333333334), vec2(253.0, -101.66666666666669), vec2(253.0, -20.0),
			vec2(253.0, -20.0), vec2(253.0, 33.0), vec2(255.0, 120.0), vec2(178.0, 120.0),
			vec2(178.0, 120.0), vec2(94.0, 120.0), vec2(91.0, 41.0), vec2(91.0, -20.0),
			vec2(91.0, -20.0), vec2(91.0, -101.66666666666666), vec2(91.0, -183.33333333333331), vec2(91.0, -265.0),
			vec2(91.0, -265.0), vec2(30.33333333333337, -265.0), vec2(-30.333333333333314, -265.0), vec2(-91.0, -265.0),
			vec2(-91.0, -265.0), vec2(-91.0, -183.33333333333334), vec2(-91.0, -101.66666666666669), vec2(-91.0, -20.0),
			vec2(-91.0, -20.0), vec2(-91.0, 37.0), vec2(-91.0, 124.0), vec2(-172.0, 124.0),
			vec2(-172.0, 124.0), vec2(-253.0, 124.0), vec2(-253.0, 37.0), vec2(-253.0, -20.0),
			vec2(-253.0, -20.0), vec2(-253.0, -101.66666666666666), vec2(-253.0, -183.33333333333331), vec2(-253.0, -265.0),
			vec2(-253.0, -265.0), vec2(-313.66666666666663, -265.0), vec2(-374.3333333333333, -265.0), vec2(-435.0, -265.0),
			vec2(-435.0, -265.0), vec2(-435.0, -94.0), vec2(-435.0, 77.0), vec2(-435.0, 248.0),
			vec2(-435.0, 248.0), vec2(-374.33333333333337, 248.0), vec2(-313.6666666666667, 248.0), vec2(-253.0, 248.0)
		};
		break;
	case 'N':
		points = {
			vec2(-88.5, 248.0), vec2(-88.5, 226.0), vec2(-88.5, 204.0), vec2(-88.5, 182.0),
			vec2(-88.5, 182.0), vec2(-87.83333333333334, 182.0), vec2(-87.16666666666666, 182.0), vec2(-86.5, 182.0),
			vec2(-86.5, 182.0), vec2(-44.5, 244.0), vec2(6.5, 265.0), vec2(77.5, 265.0),
			vec2(77.5, 265.0), vec2(215.5, 265.0), vec2(270.5, 178.0), vec2(270.5, 52.0),
			vec2(270.5, 52.0), vec2(270.5, -53.66666666666666), vec2(270.5, -159.33333333333331), vec2(270.5, -265.0),
			vec2(270.5, -265.0), vec2(209.83333333333337, -265.0), vec2(149.16666666666669, -265.0), vec2(88.5, -265.0),
			vec2(88.5, -265.0), vec2(88.5, -181.66666666666669), vec2(88.5, -98.33333333333334), vec2(88.5, -15.0),
			vec2(88.5, -15.0), vec2(88.5, 34.0), vec2(96.5, 120.0), vec2(6.5, 120.0),
			vec2(6.5, 120.0), vec2(-67.5, 120.0), vec2(-88.5, 65.0), vec2(-88.5, 1.0),
			vec2(-88.5, 1.0), vec2(-88.5, -87.66666666666666), vec2(-88.5, -176.33333333333331), vec2(-88.5, -265.0),
			vec2(-88.5, -265.0), vec2(-149.16666666666666, -265.0), vec2(-209.83333333333331, -265.0), vec2(-270.5, -265.0),
			vec2(-270.5, -265.0), vec2(-270.5, -94.0), vec2(-270.5, 77.0), vec2(-270.5, 248.0),
			vec2(-270.5, 248.0), vec2(-209.83333333333334, 248.0), vec2(-149.16666666666669, 248.0), vec2(-88.5, 248.0)
		};
		break;
	case 'O':
		points = {
			vec2(0.0, 273.5), vec2(165.0, 273.5), vec2(309.0, 174.5), vec2(309.0, -0.5),
			vec2(309.0, -0.5), vec2(309.0, -174.5), vec2(165.0, -273.5), vec2(0.0, -273.5),
			vec2(0.0, -273.5), vec2(-164.0, -273.5), vec2(-309.0, -175.5), vec2(-309.0, -0.5),
			vec2(-309.0, -0.5), vec2(-309.0, 174.5), vec2(-165.0, 273.5), vec2(0.0, 273.5),
			vec2(0.0, 115.5), vec2(-74.0, 115.5), vec2(-117.0, 62.5), vec2(-117.0, -0.5),
			vec2(-117.0, -0.5), vec2(-117.0, -65.5), vec2(-74.0, -115.5), vec2(0.0, -115.5),
			vec2(0.0, -115.5), vec2(74.0, -115.5), vec2(117.0, -65.5), vec2(117.0, -0.5),
			vec2(117.0, -0.5), vec2(117.0, 62.5), vec2(74.0, 115.5), vec2(0.0, 115.5)
		};
		break;
	case 'P':
		points = {
			vec2(91.0, 393.0), vec2(91.0, 373.6666666666667), vec2(91.0, 354.3333333333333), vec2(91.0, 335.0),
			vec2(91.0, 335.0), vec2(91.66666666666666, 335.0), vec2(92.33333333333334, 335.0), vec2(93.0, 335.0),
			vec2(93.0, 335.0), vec2(126.0, 386.0), vec2(188.0, 410.0), vec2(248.0, 410.0),
			vec2(248.0, 410.0), vec2(401.0, 410.0), vec2(507.0, 282.0), vec2(507.0, 135.0),
			vec2(507.0, 135.0), vec2(507.0, -13.0), vec2(402.0, -137.0), vec2(250.0, -137.0),
			vec2(250.0, -137.0), vec2(191.0, -137.0), vec2(130.0, -116.0), vec2(91.0, -71.0),
			vec2(91.0, -71.0), vec2(91.0, -172.66666666666666), vec2(91.0, -274.3333333333333), vec2(91.0, -376.0),
			vec2(91.0, -376.0), vec2(30.333333333333343, -376.0), vec2(-30.33333333333333, -376.0), vec2(-91.0, -376.0),
			vec2(-91.0, -376.0), vec2(-91.0, -119.66666666666669), vec2(-91.0, 136.66666666666663), vec2(-91.0, 393.0),
			vec2(-91.0, 393.0), vec2(-30.333333333333343, 393.0), vec2(30.333333333333314, 393.0), vec2(91.0, 393.0),
			vec2(202.0, 252.0), vec2(128.0, 252.0), vec2(85.0, 199.0), vec2(85.0, 136.0),
			vec2(85.0, 136.0), vec2(85.0, 71.0), vec2(128.0, 21.0), vec2(202.0, 21.0),
			vec2(202.0, 21.0), vec2(276.0, 21.0), vec2(319.0, 71.0), vec2(319.0, 136.0),
			vec2(319.0, 136.0), vec2(319.0, 199.0), vec2(276.0, 252.0), vec2(202.0, 252.0)
		};
		break;
	case 'Q':
		points = {
			vec2(83.0, 393.0), vec2(83.0, 136.66666666666669), vec2(83.0, -119.66666666666663), vec2(83.0, -376.0),
			vec2(83.0, -376.0), vec2(22.33333333333337, -376.0), vec2(-38.333333333333314, -376.0), vec2(-99.0, -376.0),
			vec2(-99.0, -376.0), vec2(-99.0, -274.33333333333337), vec2(-99.0, -172.66666666666669), vec2(-99.0, -71.0),
			vec2(-99.0, -71.0), vec2(-137.0, -116.0), vec2(-199.0, -137.0), vec2(-258.0, -137.0),
			vec2(-258.0, -137.0), vec2(-411.0, -137.0), vec2(-515.0, -13.0), vec2(-515.0, 135.0),
			vec2(-515.0, 135.0), vec2(-515.0, 281.0), vec2(-408.0, 410.0), vec2(-256.0, 410.0),
			vec2(-256.0, 410.0), vec2(-196.0, 410.0), vec2(-133.0, 386.0), vec2(-101.0, 335.0),
			vec2(-101.0, 335.0), vec2(-100.33333333333331, 335.0), vec2(-99.66666666666669, 335.0), vec2(-99.0, 335.0),
			vec2(-99.0, 335.0), vec2(-99.0, 354.3333333333333), vec2(-99.0, 373.6666666666667), vec2(-99.0, 393.0),
			vec2(-99.0, 393.0), vec2(-38.333333333333314, 393.0), vec2(22.33333333333337, 393.0), vec2(83.0, 393.0),
			vec2(-210.0, 252.0), vec2(-284.0, 252.0), vec2(-327.0, 199.0), vec2(-327.0, 136.0),
			vec2(-327.0, 136.0), vec2(-327.0, 71.0), vec2(-284.0, 21.0), vec2(-210.0, 21.0),
			vec2(-210.0, 21.0), vec2(-136.0, 21.0), vec2(-93.0, 71.0), vec2(-93.0, 136.0),
			vec2(-93.0, 136.0), vec2(-93.0, 199.0), vec2(-136.0, 252.0), vec2(-210.0, 252.0)
		};
		break;
	case 'R':
		points = {
			vec2(91.0, 133.0), vec2(91.0, 105.0), vec2(91.0, 77.0), vec2(91.0, 49.0),
			vec2(91.0, 49.0), vec2(91.66666666666666, 49.0), vec2(92.33333333333334, 49.0), vec2(93.0, 49.0),
			vec2(93.0, 49.0), vec2(128.0, 112.0), vec2(188.0, 140.0), vec2(259.0, 140.0),
			vec2(259.0, 140.0), vec2(270.6666666666667, 140.0), vec2(282.3333333333333, 140.0), vec2(294.0, 140.0),
			vec2(294.0, 140.0), vec2(294.0, 81.66666666666669), vec2(294.0, 23.33333333333337), vec2(294.0, -35.0),
			vec2(294.0, -35.0), vec2(269.0, -21.0), vec2(245.0, -18.0), vec2(217.0, -18.0),
			vec2(217.0, -18.0), vec2(116.0, -18.0), vec2(91.0, -85.0), vec2(91.0, -173.0),
			vec2(91.0, -173.0), vec2(91.0, -242.0), vec2(91.0, -311.0), vec2(91.0, -380.0),
			vec2(91.0, -380.0), vec2(30.333333333333343, -380.0), vec2(-30.33333333333333, -380.0), vec2(-91.0, -380.0),
			vec2(-91.0, -380.0), vec2(-91.0, -209.0), vec2(-91.0, -38.0), vec2(-91.0, 133.0),
			vec2(-91.0, 133.0), vec2(-30.333333333333343, 133.0), vec2(30.333333333333314, 133.0), vec2(91.0, 133.0)
		};
		break;
	case 'S':
		points = {
			vec2(209.5, 240.5), vec2(189.16666666666669, 201.83333333333331), vec2(168.83333333333331, 163.16666666666669), vec2(148.5, 124.5),
			vec2(148.5, 124.5), vec2(120.5, 139.5), vec2(81.5, 149.5), vec2(50.5, 149.5),
			vec2(50.5, 149.5), vec2(29.5, 149.5), vec2(-6.5, 140.5), vec2(-6.5, 114.5),
			vec2(-6.5, 114.5), vec2(-6.5, 79.5), vec2(50.5, 74.5), vec2(75.5, 69.5),
			vec2(75.5, 69.5), vec2(160.5, 52.5), vec2(224.5, 12.5), vec2(224.5, -82.5),
			vec2(224.5, -82.5), vec2(224.5, -217.5), vec2(101.5, -273.5), vec2(-17.5, -273.5),
			vec2(-17.5, -273.5), vec2(-90.5, -273.5), vec2(-162.5, -252.5), vec2(-224.5, -214.5),
			vec2(-224.5, -214.5), vec2(-202.5, -172.16666666666669), vec2(-180.5, -129.83333333333334), vec2(-158.5, -87.5),
			vec2(-158.5, -87.5), vec2(-121.5, -113.5), vec2(-59.5, -139.5), vec2(-14.5, -139.5),
			vec2(-14.5, -139.5), vec2(8.5, -139.5), vec2(42.5, -128.5), vec2(42.5, -100.5),
			vec2(42.5, -100.5), vec2(42.5, -60.5), vec2(-14.5, -58.5), vec2(-71.5, -43.5),
			vec2(-71.5, -43.5), vec2(-128.5, -28.5), vec2(-185.5, -0.5), vec2(-185.5, 91.5),
			vec2(-185.5, 91.5), vec2(-185.5, 217.5), vec2(-71.5, 273.5), vec2(40.5, 273.5),
			vec2(40.5, 273.5), vec2(98.5, 273.5), vec2(156.5, 264.5), vec2(209.5, 240.5)
		};
		break;
	case 'T':
		points = {
			vec2(91.0, -75.0), vec2(91.0, -196.0), vec2(91.0, -317.0), vec2(91.0, -438.0),
			vec2(91.0, -438.0), vec2(30.333333333333343, -438.0), vec2(-30.333333333333314, -438.0), vec2(-91.0, -438.0),
			vec2(-91.0, -438.0), vec2(-91.0, -317.0), vec2(-91.0, -196.0), vec2(-91.0, -75.0),
			vec2(-91.0, -75.0), vec2(-110.66666666666666, -75.0), vec2(-130.33333333333331, -75.0), vec2(-150.0, -75.0),
			vec2(-150.0, -75.0), vec2(-150.0, -25.0), vec2(-150.0, 25.0), vec2(-150.0, 75.0),
			vec2(-150.0, 75.0), vec2(-130.33333333333334, 75.0), vec2(-110.66666666666667, 75.0), vec2(-91.0, 75.0),
			vec2(-91.0, 75.0), vec2(-91.0, 126.33333333333337), vec2(-91.0, 177.66666666666663), vec2(-91.0, 229.0),
			vec2(-91.0, 229.0), vec2(-30.333333333333343, 229.0), vec2(30.333333333333314, 229.0), vec2(91.0, 229.0),
			vec2(91.0, 229.0), vec2(91.0, 177.66666666666663), vec2(91.0, 126.33333333333337), vec2(91.0, 75.0),
			vec2(91.0, 75.0), vec2(125.33333333333331, 75.0), vec2(159.66666666666663, 75.0), vec2(194.0, 75.0),
			vec2(194.0, 75.0), vec2(194.0, 25.0), vec2(194.0, -25.0), vec2(194.0, -75.0),
			vec2(194.0, -75.0), vec2(159.66666666666669, -75.0), vec2(125.33333333333337, -75.0), vec2(91.0, -75.0)
		};
		break;
	case 'U':
		points = {
			vec2(-273.0, 265.0), vec2(-212.33333333333334, 265.0), vec2(-151.66666666666669, 265.0), vec2(-91.0, 265.0),
			vec2(-91.0, 265.0), vec2(-91.0, 173.66666666666669), vec2(-91.0, 82.33333333333337), vec2(-91.0, -9.0),
			vec2(-91.0, -9.0), vec2(-91.0, -74.0), vec2(-75.0, -120.0), vec2(0.0, -120.0),
			vec2(0.0, -120.0), vec2(75.0, -120.0), vec2(91.0, -74.0), vec2(91.0, -9.0),
			vec2(91.0, -9.0), vec2(91.0, 82.33333333333331), vec2(91.0, 173.66666666666663), vec2(91.0, 265.0),
			vec2(91.0, 265.0), vec2(151.66666666666669, 265.0), vec2(212.33333333333337, 265.0), vec2(273.0, 265.0),
			vec2(273.0, 265.0), vec2(273.0, 162.0), vec2(273.0, 59.0), vec2(273.0, -44.0),
			vec2(273.0, -44.0), vec2(273.0, -213.0), vec2(154.0, -265.0), vec2(0.0, -265.0),
			vec2(0.0, -265.0), vec2(-154.0, -265.0), vec2(-273.0, -213.0), vec2(-273.0, -44.0),
			vec2(-273.0, -44.0), vec2(-273.0, 59.0), vec2(-273.0, 162.0), vec2(-273.0, 265.0)
		};
		break;
	case 'V':
		points = {
			vec2(-123.0, 383.0), vec2(-82.0, 295.33333333333337), vec2(-41.0, 207.66666666666669), vec2(0.0, 120.0),
			vec2(0.0, 120.0), vec2(40.666666666666686, 207.66666666666663), vec2(81.33333333333331, 295.3333333333333), vec2(122.0, 383.0),
			vec2(122.0, 383.0), vec2(190.0, 383.0), vec2(258.0, 383.0), vec2(326.0, 383.0),
			vec2(326.0, 383.0), vec2(236.66666666666663, 212.0), vec2(147.33333333333337, 41.0), vec2(58.0, -130.0),
			vec2(58.0, -130.0), vec2(19.333333333333314, -130.0), vec2(-19.333333333333314, -130.0), vec2(-58.0, -130.0),
			vec2(-58.0, -130.0), vec2(-147.66666666666666, 41.0), vec2(-237.33333333333331, 212.0), vec2(-327.0, 383.0),
			vec2(-327.0, 383.0), vec2(-259.0, 383.0), vec2(-191.0, 383.0), vec2(-123.0, 383.0)
		};
		break;
	case 'W':
		points = {
			vec2(-311.0, 133.0), vec2(-268.33333333333337, 40.33333333333337), vec2(-225.66666666666669, -52.333333333333314), vec2(-183.0, -145.0),
			vec2(-183.0, -145.0), vec2(-140.0, -52.33333333333337), vec2(-97.0, 40.333333333333314), vec2(-54.0, 133.0),
			vec2(-54.0, 133.0), vec2(-18.0, 133.0), vec2(18.0, 133.0), vec2(54.0, 133.0),
			vec2(54.0, 133.0), vec2(97.0, 40.33333333333337), vec2(140.0, -52.333333333333314), vec2(183.0, -145.0),
			vec2(183.0, -145.0), vec2(226.0, -52.33333333333337), vec2(269.0, 40.333333333333314), vec2(312.0, 133.0),
			vec2(312.0, 133.0), vec2(379.0, 133.0), vec2(446.0, 133.0), vec2(513.0, 133.0),
			vec2(513.0, 133.0), vec2(423.66666666666663, -38.0), vec2(334.33333333333337, -209.0), vec2(245.0, -380.0),
			vec2(245.0, -380.0), vec2(205.66666666666663, -380.0), vec2(166.33333333333337, -380.0), vec2(127.0, -380.0),
			vec2(127.0, -380.0), vec2(84.66666666666663, -286.33333333333337), vec2(42.33333333333337, -192.66666666666669), vec2(0.0, -99.0),
			vec2(0.0, -99.0), vec2(-42.333333333333314, -192.66666666666666), vec2(-84.66666666666663, -286.3333333333333), vec2(-127.0, -380.0),
			vec2(-127.0, -380.0), vec2(-166.33333333333331, -380.0), vec2(-205.66666666666663, -380.0), vec2(-245.0, -380.0),
			vec2(-245.0, -380.0), vec2(-334.3333333333333, -209.0), vec2(-423.66666666666663, -38.0), vec2(-513.0, 133.0),
			vec2(-513.0, 133.0), vec2(-445.6666666666667, 133.0), vec2(-378.33333333333337, 133.0), vec2(-311.0, 133.0)
		};
		break;
	case 'X':
		points = {
			vec2(-115.0, 0.0), vec2(-184.33333333333331, 78.33333333333331), vec2(-253.66666666666666, 156.66666666666663), vec2(-323.0, 235.0),
			vec2(-323.0, 235.0), vec2(-246.0, 235.0), vec2(-169.0, 235.0), vec2(-92.0, 235.0),
			vec2(-92.0, 235.0), vec2(-61.333333333333314, 199.66666666666669), vec2(-30.666666666666686, 164.33333333333337), vec2(0.0, 129.0),
			vec2(0.0, 129.0), vec2(30.666666666666686, 164.33333333333331), vec2(61.333333333333314, 199.66666666666663), vec2(92.0, 235.0),
			vec2(92.0, 235.0), vec2(170.33333333333337, 235.0), vec2(248.66666666666663, 235.0), vec2(327.0, 235.0),
			vec2(327.0, 235.0), vec2(256.33333333333337, 156.66666666666669), vec2(185.66666666666674, 78.33333333333337), vec2(115.0, 0.0),
			vec2(115.0, 0.0), vec2(200.33333333333337, -92.66666666666666), vec2(285.66666666666663, -185.33333333333331), vec2(371.0, -278.0),
			vec2(371.0, -278.0), vec2(291.33333333333337, -278.0), vec2(211.66666666666674, -278.0), vec2(132.0, -278.0),
			vec2(132.0, -278.0), vec2(88.0, -227.33333333333334), vec2(44.0, -176.66666666666669), vec2(0.0, -126.0),
			vec2(0.0, -126.0), vec2(-44.0, -176.66666666666666), vec2(-88.0, -227.33333333333331), vec2(-132.0, -278.0),
			vec2(-132.0, -278.0), vec2(-211.66666666666666, -278.0), vec2(-291.3333333333333, -278.0), vec2(-371.0, -278.0),
			vec2(-371.0, -278.0), vec2(-285.66666666666663, -185.33333333333331), vec2(-200.33333333333334, -92.66666666666666), vec2(-115.0, 0.0)
		};
		break;
	case 'Y':
		points = {
			vec2(-99.0, -90.0), vec2(-181.66666666666666, 57.66666666666666), vec2(-264.3333333333333, 205.33333333333331), vec2(-347.0, 353.0),
			vec2(-347.0, 353.0), vec2(-277.0, 353.0), vec2(-207.0, 353.0), vec2(-137.0, 353.0),
			vec2(-137.0, 353.0), vec2(-91.33333333333334, 265.33333333333337), vec2(-45.666666666666686, 177.66666666666669), vec2(0.0, 90.0),
			vec2(0.0, 90.0), vec2(44.666666666666686, 177.66666666666663), vec2(89.33333333333331, 265.3333333333333), vec2(134.0, 353.0),
			vec2(134.0, 353.0), vec2(203.0, 353.0), vec2(272.0, 353.0), vec2(341.0, 353.0),
			vec2(341.0, 353.0), vec2(204.0, 96.66666666666669), vec2(67.0, -159.66666666666663), vec2(-70.0, -416.0),
			vec2(-70.0, -416.0), vec2(-138.0, -416.0), vec2(-206.0, -416.0), vec2(-274.0, -416.0),
			vec2(-274.0, -416.0), vec2(-215.66666666666669, -307.33333333333326), vec2(-157.3333333333333, -198.66666666666669), vec2(-99.0, -90.0)
		};
		break;
	case 'Z':
		points = {
			vec2(32.0, -105.5), vec2(104.0, -105.5), vec2(176.0, -105.5), vec2(248.0, -105.5),
			vec2(248.0, -105.5), vec2(248.0, -155.83333333333331), vec2(248.0, -206.16666666666666), vec2(248.0, -256.5),
			vec2(248.0, -256.5), vec2(74.66666666666669, -256.5), vec2(-98.66666666666663, -256.5), vec2(-272.0, -256.5),
			vec2(-272.0, -256.5), vec2(-191.66666666666669, -135.83333333333334), vec2(-111.33333333333334, -15.166666666666686), vec2(-31.0, 105.5),
			vec2(-31.0, 105.5), vec2(-100.66666666666666, 105.5), vec2(-170.33333333333331, 105.5), vec2(-240.0, 105.5),
			vec2(-240.0, 105.5), vec2(-240.0, 155.83333333333331), vec2(-240.0, 206.16666666666663), vec2(-240.0, 256.5),
			vec2(-240.0, 256.5), vec2(-69.33333333333334, 256.5), vec2(101.33333333333331, 256.5), vec2(272.0, 256.5),
			vec2(272.0, 256.5), vec2(192.0, 135.83333333333331), vec2(112.0, 15.166666666666686), vec2(32.0, -105.5)
		};
		break;
	}
	this->controlPoints = points;
}

void Letter::generateAnchorPoints(char letter) {
	//TODO
	std::vector<Anchor> anchor;
	switch (letter) {
		case 'A':
			anchors = {};
			break;
		case 'B':
			break;
		case 'C':
			break;
		case 'D':
			break;
		case 'E':
			break;
		case 'F':
			break;
		case 'G':
			break;
		case 'H':
			break;
		case 'I':
			break;
			//J looks pretty much the same as I in the chosen font
		case 'J':
			break;
		case 'K':
			break;
		case 'L':
			break;
		case 'M':
			break;
		case 'N':
			break;
		case 'O':
			break;
		case 'P':
			break;
		case 'Q':
			break;
		case 'R':
			break;
		case 'S':
			break;
		case 'T':
			break;
		case 'U':
			break;
		case 'V':
			break;
		case 'W':
			break;
		case 'X':
			break;
		case 'Y':
			break;
		case 'Z':
			break;
	}
	this->anchors = anchor;
}

void Letter::generateArea(char letter) {
	float area = 0.f;
	switch (letter) {
		case 'A':
			area = 327106.f;
			break;
		case 'B':
			area = 506506.f;
			break;
		case 'C':
			area = 222629.f;
			break;
		case 'D':
			area = 506506.f;
			break;
		case 'E':
			area = 309055.f;
			break;
		case 'F':
			area = 313320.f;
			break;
		case 'G':
			area = 470028.f;
			break;
		case 'H':
			area = 449030.f;
			break;
		case 'I':
			area = 165648.f;
			break;
			//J looks pretty much the same as I in the chosen font
		case 'J':
			area = 217872.f;
			break;
		case 'K':
			area = 527880.f;
			break;
		case 'L':
			area = 151060.f;
			break;
		case 'M':
			area = 461100.f;
			break;
		case 'N':
			area = 286730.f;
			break;
		case 'O':
			area = 338046.f;
			break;
		case 'P':
			area = 470028.f;
			break;
		case 'Q':
			area = 470028.f;
			break;
		case 'R':
			area = 200200.f;
			break;
		case 'S':
			area = 245603.f;
			break;
		case 'T':
			area = 229448.f;
			break;
		case 'U':
			area = 289380.f;
			break;
		case 'V':
			area = 334989.f;
			break;
		case 'W':
			area = 526338.f;
			break;
		case 'X':
			area = 380646.f;
			break;
		case 'Y':
			area = 529072.f;
			break;
		case 'Z':
			area = 279072.f;
			break;
	}
	this->boundingArea = area;
}

Letter::Letter(char letter)
{
	generateControlPoints(letter);
	//anchors = generateAnchorPoints(letter);
	generateArea(letter);
}

Letter::~Letter() {
	anchors.clear();
}

ConstLetters::ConstLetters() {
	for (int i = 65; i <= 90; i++) {
		const Letter l = Letter(static_cast<char>(i));
		letters.push_back(l);
	}
};

ConstLetters::~ConstLetters() {
	letters.clear();
}

Letter& ConstLetters::getLetter(char letter) {
	int index = static_cast<int>(letter) - 65;
	return letters[index];
}

std::vector<vec2> calculateBezierPoints(const std::vector<vec2>& controlPoints, int numPoints) {
	std::vector<vec2> curvePoints;
	for (int i = 0; i <= numPoints; ++i) {
		float t = float(i) / numPoints;
		float one_minus_t = 1.0f - t;
		vec2 point = one_minus_t * one_minus_t * one_minus_t * controlPoints[0] +
			3 * one_minus_t * one_minus_t * t * controlPoints[1] +
			3 * one_minus_t * t * t * controlPoints[2] +
			t * t * t * controlPoints[3];
		curvePoints.push_back(point);
	}
	return curvePoints;
}

void Letter::drawBezierCurve(cv::Mat& image) {
	int canvasWidth = 1200; // Width of the canvas
	int canvasHeight = 1200; // Height of the canvas
	cv::Point canvasCenter(canvasWidth / 2, canvasHeight / 2);
	for (int i = 0; i < this->controlPoints.size(); i+=4) {
		{
			std::vector<vec2> points;
			points.push_back(vec2(this->controlPoints[i].x() + canvasCenter.x, canvasCenter.y - this->controlPoints[i].y()));
			points.push_back(vec2(this->controlPoints[i+1].x() + canvasCenter.x, canvasCenter.y - this->controlPoints[i+1].y()));
			points.push_back(vec2(this->controlPoints[i+2].x() + canvasCenter.x, canvasCenter.y - this->controlPoints[i+2].y()));
			points.push_back(vec2(this->controlPoints[i+3].x() + canvasCenter.x, canvasCenter.y - this->controlPoints[i+3].y()));
			std::vector<vec2> curvePoints = calculateBezierPoints(points, 100);
			for (size_t i = 0; i < curvePoints.size() - 1; ++i) {
				cv::line(image,
					cv::Point(curvePoints[i][0], curvePoints[i][1]),
					cv::Point(curvePoints[i + 1][0], curvePoints[i + 1][1]),
					cv::Scalar(255, 0, 0), 2);
			}
		}
	}
	//draw x, y-axis
	cv::line(image, cv::Point(canvasCenter.x, 0), cv::Point(canvasCenter.x, canvasHeight), cv::Scalar(0, 255, 0), 1);
	cv::line(image, cv::Point(0, canvasCenter.y), cv::Point(canvasWidth, canvasCenter.y), cv::Scalar(0, 255, 0), 1);
}